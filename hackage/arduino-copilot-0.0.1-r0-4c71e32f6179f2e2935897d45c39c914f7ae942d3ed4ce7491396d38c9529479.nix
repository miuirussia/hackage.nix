{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  {
    flags = {};
    package = {
      specVersion = "1.8";
      identifier = { name = "arduino-copilot"; version = "0.0.1"; };
      license = "BSD-3-Clause";
      copyright = "2020 Joey Hess";
      maintainer = "Joey Hess <id@joeyh.name>";
      author = "Joey Hess";
      homepage = "";
      url = "";
      synopsis = "Arduino programming in haskell using the stream DSL";
      description = "arduino-copilot contains the basic building blocks to program your\nArduino Nano, Arduino Uno or compatible hardware using Haskell\nand Functional Reactive Programming (FRP).\n\narduino-copilot uses the Copilot stream domain-specific language (DSL)\nto generate an Arduino sketch, which can be loaded in the Arduino IDE\nand uploaded to the board. Other methods of deploying sketches to the\nArduino, such as the Arduino-Makefile, can also be used with a sketch\ngenerated by arduino-copilot.\n\nAll the messy details are abstracted away, letting you focus on the\ndesired behavior of the Arduino. This is all the code needed to make\nit blink its LED:\n\n\nCopilot is a stream (i.e., infinite lists) domain-specific language\n(DSL) in Haskell that compiles into embedded C.  Copilot contains an\ninterpreter, multiple back-end compilers, and other verification tools.\nA tutorial, bug reports, and todos are available at\n<https://github.com/Copilot-Language/copilot-discussion>.";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."copilot" or (errorHandler.buildDepError "copilot"))
          (hsPkgs."copilot-c99" or (errorHandler.buildDepError "copilot-c99"))
          (hsPkgs."filepath" or (errorHandler.buildDepError "filepath"))
          (hsPkgs."directory" or (errorHandler.buildDepError "directory"))
          (hsPkgs."mtl" or (errorHandler.buildDepError "mtl"))
          (hsPkgs."unix" or (errorHandler.buildDepError "unix"))
          ];
        buildable = true;
        };
      };
    }