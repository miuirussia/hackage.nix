{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  {
    flags = {};
    package = {
      specVersion = "2.0";
      identifier = { name = "sockets-and-pipes"; version = "0.1"; };
      license = "Apache-2.0";
      copyright = "";
      maintainer = "Joy of Haskell <hello@joyofhaskell.com>";
      author = "Chris Martin, Julie Moronuki";
      homepage = "";
      url = "";
      synopsis = "Support for the Sockets and Pipes book";
      description = "This package contains some utilities that support /Sockets and Pipes/\n(available on <https://leanpub.com/sockets-and-pipes Leanpub>),\nas well as re-exports from all the libraries mentioned in the book.\n\n== Code in this package\n\nOriginal contributions from this package:\n\n* \"SocketsAndPipes.Serve\"\n\n== Chapters\n\nList of modules that make a significant appearance in each chapter:\n\n+----+----------------------+----------------------------------+---------------------------------------+\n|    |   Chapter            |          Module                  |               Purpose                 |\n+====+======================+==================================+=======================================+\n|  1 | __Handles__          | \"System.IO\"                      | Writing to a file                     |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Control.Exception.Safe\"         | Using `bracket` to ensure             |\n|    |                      |                                  | the file handle is closed             |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  2 | __Chunks__           | \"Data.Text\"                      | `Text` is a chunk of characters       |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.Text.IO\"                   | Reading and writing files using       |\n|    |                      |                                  | `Text` instead of `String`            |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  3 | __Bytes__            | \"Data.Word\"                      | What a byte is                        |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.ByteString\"                | `ByteString` is a chunk of bytes      |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.Text.Encoding\"             | Conversions between `ByteString`      |\n|    |                      |                                  | and `Text`                            |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.String\"                    | How `ByteString` works with           |\n|    |                      +----------------------------------+ `OverloadedStrings`                   |\n|    |                      | \"Data.ByteString.Char8\"          |                                       |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"System.IO\"                      | Putting `Handle`s into binary mode    |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  4 | __Sockets__          | \"Network.Socket\"                 | Opening and closing sockets           |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Network.Socket.ByteString\"      | Writing to and reading from sockets   |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"System.Timeout\"                 | Giving up quickly when a service      |\n|    |                      |                                  | does not respond                      |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  5 | __HTTP__             | \"ASCII\"                          | Expressing HTTP messages as strings   |\n|    |                      +----------------------------------+                                       |\n|    |                      | \"ASCII.Char\"                     |                                       |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"SocketsAndPipes.Serve\"          | Our first rudimentary web server      |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  6 | __HTTP types__       | \"Data.ByteString\"                | Defining datatypes for the            |\n|    |                      +----------------------------------+ parts of an HTTP message              |\n|    |                      | \"Data.ByteString.Lazy\"           |                                       |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  7 | __Encoding__         | \"Data.Text.Lazy\"                 | Efficient string concatenations       |\n|    |                      +----------------------------------+                                       |\n|    |                      | \"Data.Text.Lazy.Builder\"         |                                       |\n|    |                      +----------------------------------+                                       |\n|    |                      | \"Data.ByteString.Builder\"        |                                       |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.Time\"                      | Simple performance testing            |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.Foldable\"                  | Encoding repetitions with `foldMap`   |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  8 | __Responding__       | \"Network.Socket.ByteString.Lazy\" | Sending responses constructed by      |\n|    |                      |                                  | bytestring `Builder`                  |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"SocketsAndPipes.Serve\"          | New web server using the              |\n|    |                      |                                  | encoding functions                    |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.Int\"                       | Contrasting `Integer`, `Int`,         |\n|    |                      |                                  | and `Int64`                           |\n+----+----------------------+----------------------------------+---------------------------------------+\n|  9 | __Content types__    | \"Data.Text.Lazy.Builder.Int\"     | Building a text response body         |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Text.Blaze.Html\"                | Building an HTML response body        |\n|    |                      +----------------------------------+                                       |\n|    |                      | \"Text.Blaze.Html5\"               |                                       |\n|    |                      +----------------------------------+                                       |\n|    |                      | \"Text.Blaze.Html.Renderer.Utf8\"  |                                       |\n|    |                      +----------------------------------+---------------------------------------+\n|    |                      | \"Data.Aeson\"                     | Building a JSON response body         |\n+----+----------------------+----------------------------------+---------------------------------------+\n| 10 | __Change__           | \"Control.Concurrent.STM.TVar\"    | Shared state for request-handling     |\n|    |                      +----------------------------------+ threads                               |\n|    |                      | \"Control.Monad.STM\"              |                                       |\n+----+----------------------+----------------------------------+---------------------------------------+\n| 11 | __Chunked bodies__   |                                                                          |\n+----+----------------------+                                                                          |\n| 12 | __Request parsing__  |                                                                          |\n+----+----------------------+                                                                          |\n| 13 | __Reading headers__  |                                                                          |\n+----+----------------------+                 The remaining chapters are in progress.                  |\n| 14 | __Body parsing__     |                                                                          |\n+----+----------------------+                                                                          |\n| 15 | __Connection reuse__ |                                                                          |\n+----+----------------------+                                                                          |\n| 16 | __Pipes__            |                                                                          |\n+----+----------------------+--------------------------------------------------------------------------+\n\n== Libraries\n\nRe-exported modules, grouped by the package that each module originally comes from:\n\n__ascii__ - \"ASCII\", \"ASCII.Char\"\n\n__aeson__ - \"Data.Aeson\"\n\n__async__ - \"Control.Concurrent.Async\"\n\n__base__\n\n* File handles - \"System.IO\"\n* Fundamental data types - \"Data.Word\", \"Data.Int\", \"Data.Char\"\n* Miscellania - \"System.Timeout\", \"Control.Monad\",\n\"Data.Foldable\", \"Data.List\"\n\n__blaze-html__ - \"Text.Blaze.Html\", \"Text.Blaze.Html5\",\n\"Text.Blaze.Html5.Attributes\", \"Text.Blaze.Html.Renderer.Utf8\"\n\n__bytestring__\n\n* Strict - \"Data.ByteString\"\n* Lazy - \"Data.ByteString.Lazy\"\n* Builder - \"Data.ByteString.Builder\"\n* \"Data.ByteString.Char8\" -\nThis is included mostly to discuss why we don't use it.\n\n__network__\n\n* \"Network.Socket\" -\nThe Socket type, operations for opening and closing sockets\n* \"Network.Socket.ByteString\" -\nSocket read/write operations with strict byte strings\n* \"Network.Socket.ByteString.Lazy\" -\nSocket read/write operations with lazy byte strings\n\n__safe-exceptions__ - \"Control.Exception.Safe\"\n\n__stm__ - \"Control.Monad.STM\", \"Control.Concurrent.STM.TVar\"\n\n__text__\n\n* Strict - \"Data.Text\", \"Data.Text.Encoding\", \"Data.Text.IO\"\n* Lazy - \"Data.Text.Lazy\", \"Data.Text.Lazy.Encoding\", \"Data.Text.Lazy.IO\"\n* Builder - \"Data.Text.Lazy.Builder\", \"Data.Text.Lazy.Builder.Int\"\n\n__time__ - \"Data.Time\"";
      buildType = "Simple";
      };
    components = {
      "library" = {
        depends = [
          (hsPkgs."ascii" or (errorHandler.buildDepError "ascii"))
          (hsPkgs."aeson" or (errorHandler.buildDepError "aeson"))
          (hsPkgs."async" or (errorHandler.buildDepError "async"))
          (hsPkgs."base" or (errorHandler.buildDepError "base"))
          (hsPkgs."blaze-html" or (errorHandler.buildDepError "blaze-html"))
          (hsPkgs."bytestring" or (errorHandler.buildDepError "bytestring"))
          (hsPkgs."containers" or (errorHandler.buildDepError "containers"))
          (hsPkgs."network" or (errorHandler.buildDepError "network"))
          (hsPkgs."safe-exceptions" or (errorHandler.buildDepError "safe-exceptions"))
          (hsPkgs."stm" or (errorHandler.buildDepError "stm"))
          (hsPkgs."text" or (errorHandler.buildDepError "text"))
          (hsPkgs."time" or (errorHandler.buildDepError "time"))
          ];
        buildable = true;
        };
      };
    }