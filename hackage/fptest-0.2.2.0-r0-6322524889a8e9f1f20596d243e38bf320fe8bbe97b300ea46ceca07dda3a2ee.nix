{ system
  , compiler
  , flags
  , pkgs
  , hsPkgs
  , pkgconfPkgs
  , errorHandler
  , config
  , ... }:
  {
    flags = {};
    package = {
      specVersion = "1.10";
      identifier = { name = "fptest"; version = "0.2.2.0"; };
      license = "BSD-3-Clause";
      copyright = "2014 John Pavel and 2004 IBM Corp";
      maintainer = "jrp@dial.pipex.com";
      author = "John Pavel";
      homepage = "https://github.com/jrp2014/fptest";
      url = "";
      synopsis = "IEEE754r floating point conformance tests";
      description = "A series of floating point conformance tests for Haskell.\nCurrently implemented are:\nQTrial, the floating point benchmark described in / IEEE Standard 754 for Binary Floating-Point\nArithmetic / by Prof. W. Kahan <http://www.eecs.berkeley.edu/~wkahan/ieee754status/IEEE754.PDF>\nThis can be run with a simple @cabal run qtrial@.\nFPTest runs a sequence of floating point test vectors generated by IBM's\n<https://www.research.ibm.com/haifa/projects/verification/fpgen/ FPGen Floating-Point Test Generator>.\nThis is done either by interpreting the tests or by translating the tests\ninto a Haskell HUnit test suite script that can just be executed using\n@runhaskell@.\nThe IBM test vectors are available from\n<https://www.research.ibm.com/haifa/projects/verification/fpgen/ here>.\nYou will, most likely, want the binary tests unless you have a decimal machine.\nOnly 32-bit float tests are provided (not 64-bit double ones) although FPTest supports Doubles.\nThe syntax of the test vectors can be found\n<https://www.research.ibm.com/haifa/projects/verification/fpgen/syntax.txt here> or in Chapter 4\n<https://www.research.ibm.com/haifa/projects/verification/fpgen/papers/ieee-test-suite-v2.pdfs\nFloating-Point Test-Suite for IEEE here>";
      buildType = "Simple";
      };
    components = {
      exes = {
        "qtrial" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."test-framework" or (errorHandler.buildDepError "test-framework"))
            (hsPkgs."test-framework-hunit" or (errorHandler.buildDepError "test-framework-hunit"))
            (hsPkgs."HUnit" or (errorHandler.buildDepError "HUnit"))
            (hsPkgs."parsec3-numbers" or (errorHandler.buildDepError "parsec3-numbers"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            (hsPkgs."test-framework-quickcheck2" or (errorHandler.buildDepError "test-framework-quickcheck2"))
            ];
          buildable = true;
          };
        "fptest" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."parsec" or (errorHandler.buildDepError "parsec"))
            (hsPkgs."test-framework" or (errorHandler.buildDepError "test-framework"))
            (hsPkgs."test-framework-hunit" or (errorHandler.buildDepError "test-framework-hunit"))
            (hsPkgs."HUnit" or (errorHandler.buildDepError "HUnit"))
            (hsPkgs."parsec3-numbers" or (errorHandler.buildDepError "parsec3-numbers"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            (hsPkgs."test-framework-quickcheck2" or (errorHandler.buildDepError "test-framework-quickcheck2"))
            ];
          buildable = true;
          };
        };
      tests = {
        "qtrial-quickcheck" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."parsec" or (errorHandler.buildDepError "parsec"))
            (hsPkgs."test-framework" or (errorHandler.buildDepError "test-framework"))
            (hsPkgs."test-framework-hunit" or (errorHandler.buildDepError "test-framework-hunit"))
            (hsPkgs."HUnit" or (errorHandler.buildDepError "HUnit"))
            (hsPkgs."parsec3-numbers" or (errorHandler.buildDepError "parsec3-numbers"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            (hsPkgs."test-framework-quickcheck2" or (errorHandler.buildDepError "test-framework-quickcheck2"))
            ];
          buildable = true;
          };
        "fptest-quickcheck" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."parsec" or (errorHandler.buildDepError "parsec"))
            (hsPkgs."test-framework" or (errorHandler.buildDepError "test-framework"))
            (hsPkgs."test-framework-hunit" or (errorHandler.buildDepError "test-framework-hunit"))
            (hsPkgs."HUnit" or (errorHandler.buildDepError "HUnit"))
            (hsPkgs."parsec3-numbers" or (errorHandler.buildDepError "parsec3-numbers"))
            (hsPkgs."QuickCheck" or (errorHandler.buildDepError "QuickCheck"))
            (hsPkgs."test-framework-quickcheck2" or (errorHandler.buildDepError "test-framework-quickcheck2"))
            ];
          buildable = true;
          };
        "doctest" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."doctest" or (errorHandler.buildDepError "doctest"))
            (hsPkgs."Glob" or (errorHandler.buildDepError "Glob"))
            ];
          buildable = true;
          };
        "haddock" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."process" or (errorHandler.buildDepError "process"))
            (hsPkgs."regex-compat" or (errorHandler.buildDepError "regex-compat"))
            ];
          buildable = true;
          };
        "hlint" = {
          depends = [
            (hsPkgs."base" or (errorHandler.buildDepError "base"))
            (hsPkgs."hlint" or (errorHandler.buildDepError "hlint"))
            ];
          buildable = true;
          };
        };
      };
    }